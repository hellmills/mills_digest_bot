import logging
import os
from aiogram import Bot, Dispatcher, types, executor
import asyncio
import datetime

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Simple analytics example
def get_daily_digest():
    today = datetime.date.today()
    # In production, this would pull from real APIs or analysis functions
    return f'üìä {today} ‚Äì –ù–æ–≤–æ—Å—Ç–∏:'

- üìà –ë–∏—Ç–∫–æ–π–Ω –Ω–∞ –ø–æ–¥—ä–µ–º–µ
- üá∫üá∏ –§–†–° —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞–≤–∫—É
- üìâ –†—ã–Ω–∫–∏ –∂–¥—É—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–Ω—Ñ–ª—è—Ü–∏–∏

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –¥–µ—Ä–∂–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ ETH"

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Mills Digest Bot. –ò—Å–ø–æ–ª—å–∑—É–π /today, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É.")

@dp.message_handler(commands=["today"])
async def today_digest(message: types.Message):
    digest = get_daily_digest()
    await message.reply(digest)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
